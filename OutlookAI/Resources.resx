<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="NichtVeröffentlicht" xml:space="preserve">
    <value>Not published</value>
  </data>
  <data name="Prompt1" xml:space="preserve">
    <value>Act as an expert in professional communication, customer service, diplomacy, and problem-solving. Given the sender name and the body of one or more emails (in any language), generate the following four responses. For each response, mirror the language, tone, and length of the original email conversation, and start with an appropriate greeting.

Positive Acknowledgement:
Provide a response that begins with a relevant greeting, and positively acknowledges the sender’s message.

Request for More Information:
Write a reply with a suitable greeting that politely asks for clarification or more information, while keeping the same style and politeness level.

Provide a Helpful Suggestion or Solution:
Respond with a fitting greeting and offer a helpful suggestion, idea, or possible solution tailored to the sender's topic.

Express Gratitude or Appreciation:
Begin with a greeting, and write a message that expresses gratitude or appreciation for the sender’s communication.

Ensure each reply matches the formality, tone, and length of the input email. For all responses, use the same language as the provided email.</value>
  </data>
  <data name="Prompt2" xml:space="preserve">
    <value>Write me a to-do list for the following email. Write in detail and use paragraphs to structure the argument.</value>
  </data>
  <data name="Prompt3" xml:space="preserve">
    <value>Write me a response to the following email with 3 follow-up questions. Use the same language as the email for your response. Do not include an email footer or subject line. Write in detail and in an informal style.</value>
  </data>
  <data name="Prompt4" xml:space="preserve">
    <value>Act as an expert in professional communication, customer service, diplomacy, and problem-solving. Given the sender name and the body of one or more emails (in any language), generate comprehensive and detailed responses for the following four scenarios. For every response, mirror the language, tone, and length (aiming for a substantial, fully developed reply) of the original email conversation, and start with an appropriate greeting. Assume the Mail is written to me, Falko Nuppnau 

Incorporate these specific inputs thoughtfully and explicitly in each response:
§§Input§§

Positive Acknowledgement:
Craft a well-developed and warm response that begins with a relevant greeting. Positively acknowledge the sender’s message, refer to specific points they raised, and integrate the provided inputs in a natural, meaningful way. Elaborate wherever possible to offer a complete and supportive acknowledgment.

Positive Informal Acknowledgement:
Craft a well-developed and informal response that begins with a relevant greeting. Positively acknowledge the sender’s message, refer to specific points they raised, and integrate the provided inputs in a natural, meaningful way. Elaborate wherever possible to offer a complete and supportive acknowledgment.

Request for More Information:
Write a courteous and comprehensive reply, opening with an appropriate greeting. Clearly and politely ask for any needed clarification or additional details. Make sure to reference the §§Input§§ in your information request, connecting these points to the overall context of the conversation for clarity.

Helpful Suggestion or Solution:
Develop a substantial response that starts with a fitting greeting and includes a helpful suggestion, idea, or possible solution based on both the sender’s topic and §§Input§§. Provide step-by-step or well-structured advice, and relate suggestions directly to the details mentioned in the sender's email.

Gratitude or Appreciation:
Compose a thoughtful and expressive message that opens with a greeting and communicates genuine gratitude or appreciation. Draw on both the overall correspondence and §§Input§§, highlighting specific aspects you are thankful for and offering encouragement or positive feedback.

Ensure all replies adopt the tone, formality, and language of the provided email, and elaborate where possible so that each response is detailed and complete.

Append the sender's name and body of the email(s) below. </value>
  </data>
  <data name="Title1" xml:space="preserve">
    <value>3 Antworten</value>
  </data>
  <data name="Title2" xml:space="preserve">
    <value>ToDo</value>
  </data>
  <data name="Title3" xml:space="preserve">
    <value>Rückfragen</value>
  </data>
  <data name="Title4" xml:space="preserve">
    <value>Custom</value>
  </data>
  <data name="ErrorcallingOllama" xml:space="preserve">
    <value>#TODO#_Error in the request to oLLAMA</value>
  </data>
  <data name="ErrorcallingOpenai" xml:space="preserve">
    <value>#TODO#_Error in the request to ChatGPT</value>
  </data>
  <data name="ComposePrompt1" xml:space="preserve">
    <value>Please formulate this email more professionally. \r\n - Do not include a subject line or signature.\r\n - Keep the salutation (you, they) as is.</value>
  </data>
  <data name="ComposePrompt2" xml:space="preserve">
    <value>Revise this email so that it is more clearly structured and easier to understand, without changing the content. Do not create a subject line or signature. Keep the salutation (you, they) as is:</value>
  </data>
  <data name="ComposePrompt3" xml:space="preserve">
    <value>Make this email shorter and more personal, as if you were writing to a good colleague or acquaintance:  
- Do not include a subject line or signature.  
- Keep the salutation (you, they) the same.</value>
  </data>
  <data name="ComposePromptTitle1" xml:space="preserve">
    <value>Professional</value>
  </data>
  <data name="ComposePromptTitle2" xml:space="preserve">
    <value>Clearer</value>
  </data>
  <data name="ComposePromptTitle3" xml:space="preserve">
    <value>Informal</value>
  </data>
  <data name="SummarizeTitle1" xml:space="preserve">
    <value>Summary 1</value>
  </data>
  <data name="SummarizeTitle2" xml:space="preserve">
    <value>Summary 2</value>
  </data>
  <data name="SummarizePrompt1" xml:space="preserve">
    <value>Summarize the following email, list the key statements and information, and describe the tone of the email. 

Analyze the email: 
Read the original email to understand the context, the issue, and the sender's tone.

Incorporate content input: 
Use only the provided content information and statements as the basis for the response.</value>
  </data>
  <data name="SummarizePrompt2" xml:space="preserve">
    <value>Summarize the following email. Read the original email to understand the context, the issue, and the sender's tone.</value>
  </data>
  <data name="OpenAiDefaultModel" xml:space="preserve">
    <value>gpt-4o-mini</value>
  </data>
  <data name="ComposeNotTextSelected" xml:space="preserve">
    <value>Please select some text and try again. \r\n </value>
  </data>
</root>